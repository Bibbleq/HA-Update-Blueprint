alert:
  raspberry_cpu_temperature:
    name: Raspberry PI CPU temperature
    message: >-
      The temperature in your Raspberry PI used with Home Assistant is too high ({{ states('sensor.processor_temperature') }}ºC).
      
      Please take some action or the system will shut down automatically.
    done_message: Raspberry PI temperature is back to normal ({{ states('sensor.processor_temperature') }}ºC).
    entity_id: binary_sensor.home_assistant_temperature_high
    repeat: 30
    can_acknowledge: true
    skip_first: false
    notifiers:
      - edward_all_devices
      - signal_edward

script:
  home_groups_update:
    alias: Home - Groups - Update
    icon: mdi:group
    mode: single
    variables:
      core_power_entities: "{{ ['sensor.kitchen_cooker_hood_power'] + expand(integration_entities('shelly')) | selectattr('domain', 'eq', 'sensor') | selectattr('attributes.device_class', 'defined') | selectattr('attributes.device_class', 'eq', 'power') | map(attribute='entity_id') | list }}"
      core_switch_entities: "{{ ['switch.kitchen_cooker_hood'] + expand(integration_entities('shelly')) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}"
      all_areas: >-
        {% set areas = namespace(area=[]) %}
        {% for state in expand(core_power_entities) %}
          {% set areas.area =  areas.area + [area_name(state.entity_id)] %}
        {% endfor %}
        {{ areas.area | unique | list }}
    sequence:
    - alias: 'Group: Core power switches'
      continue_on_error: true
      service: group.set
      data:
        object_id: home_core_power_switches
        name: Home - Core power switches
        icon: mdi:flash
        entities: "{{ core_switch_entities | join(',') }}"
    - alias: 'Group: Core power sensor'
      continue_on_error: true
      service: group.set
      data:
        object_id: home_core_power_sensors
        name: Home - Core power sensors
        icon: mdi:flash
        entities: "{{ core_power_entities | join(',') }}"
    - alias: 'Group: Power sensors by areas'
      continue_on_error: true
      repeat:
        count: '{{ all_areas | count }}'
        sequence:
          - service: logbook.log
            data:
              name: Create group
              entity_id: '{{ this.entity_id }}'
              message: "Creating group {{ all_areas[repeat.index - 1] | lower | replace(' ', '_') | replace('-', '') }}_power_sensors."
            continue_on_error: true
          - service: group.set
            data:
              object_id: "{{ all_areas[repeat.index - 1] | lower | replace(' ', '_') | replace('-', '') }}_power_sensors"
              name: "{{ all_areas[repeat.index - 1]  | capitalize }} - Power sensors"
              icon: mdi:flash
              entities: >-
                {{ expand(core_power_entities) 
                  | selectattr('entity_id', 'in', area_entities(all_areas[repeat.index-1])) 
                  | map(attribute='entity_id') 
                  | list 
                }}
            continue_on_error: true

sensor:
  - platform: systemmonitor # https://www.home-assistant.io/integrations/systemmonitor/
    #name: systemmonitor
    resources:
      - type: disk_use_percent
      - type: disk_use
      - type: disk_free
      - type: memory_use_percent
      - type: memory_use
      - type: memory_free
      - type: swap_use_percent
      - type: swap_use
      - type: swap_free
      - type: load_1m
      - type: load_5m
      - type: load_15m
      - type: network_in
        arg: eth0
      - type: network_out
        arg: eth0
      - type: throughput_network_in
        arg: eth0
      - type: throughput_network_out
        arg: eth0
      - type: packets_in
        arg: eth0
      - type: packets_out
        arg: eth0
      - type: ipv4_address
        arg: eth0
      - type: ipv6_address
        arg: eth0
      - type: processor_use
      - type: processor_temperature
      - type: last_boot

  - platform: time_date
    display_options:
      - "time"
      - "date"
      - "date_time"
      - "date_time_utc"
      - "date_time_iso"
      - "time_date"
      - "time_utc"
      - "beat"

    #- platform: uptime # https://www.home-assistant.io/integrations/uptime/

shell_command: # https://www.home-assistant.io/common-tasks/os/ and https://www.home-assistant.io/integrations/shell_command/
  host_reboot: ha host reboot
  host_shutdown: ha host shutdown

#switch:
  #- platform: command_line
    #switches:
      #home_assistant_system_shutdown:
        #command_off: "/usr/sbin/poweroff"

template:
  #- binary_sensor:
    #- name: Home Assistant temperature is high
      #unique_id: a3fd75fb-e537-48bf-a7ca-04b083fb9dba
      #state: "{{ states('sensor.processor_temperature') | float(default=0) > 65 }}"
      #device_class: problem

  - trigger:
    - platform: time_pattern # This will update every night
      hours: "0"
      minutes: "0"
    - platform: homeassistant
      event: start
    - platform: state
      entity_id:
        - input_button.home_assistant_update_entities_count
    sensor:
      - name: Home Assistant - Entities count
        unique_id: 85f96d7f-d492-4030-881e-4ce26ef1f707
        state: "{{ states | list | count | int(0) }}"
        attributes:
          last_update: "{{ now() }}"
          unavailable: "{{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | list | count | int(0) }}"
          domain_list: "{{ states | map(attribute='domain') | unique | list | sort }}"
          count_list: >-
            {% set ns = namespace(count_list = []) %}
            {% for domain in (states | map(attribute='domain') | unique | list | sort) %}
              {% set ns.count_list = ns.count_list + [states | selectattr('domain', 'eq', domain) | list | count | int(0)] %}
            {% endfor %}
            {{ ns.count_list }}
          unavailable_count_list: >-
            {% set ns = namespace (unavailable_count_list = []) %}
            {% for domain in (states | map(attribute='domain') | unique | list | sort) %}
              {% set ns.unavailable_count_list = ns.unavailable_count_list + [states | selectattr('domain', 'eq', domain) | selectattr('state', 'in', ['unavailable', 'unknown']) | list | count | int(0)] %}
            {% endfor %}
            {{ ns.unavailable_count_list }}

  - trigger:
    - platform: homeassistant
      event: shutdown
    sensor:
      - name: Home Assistant - Last shutdown
        unique_id: 87eca4ee-cbf5-4558-a85e-0da0e8b8e787
        state: "{{ now() }}"

  - trigger:
    - platform: homeassistant
      event: start
    sensor:
      - name: Home Assistant - Last start
        unique_id: aae6f0fb-dc05-4f96-b51c-ee28af82c34a
        state: "{{ now() }}"
