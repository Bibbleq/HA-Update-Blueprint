alert:
  raspberry_cpu_temperature:
    name: Server CPU temperature
    message: >-
      The temperature in your PC used with Home Assistant is too high ({{ states('sensor.processor_temperature') }}ºC).

      Please take some action or the system will shut down automatically.
    done_message: PC temperature is back to normal ({{ states('sensor.processor_temperature') }}ºC).
    entity_id: binary_sensor.home_assistant_temperature_high
    repeat: 30
    can_acknowledge: true
    skip_first: false
    notifiers:
      - edward_all_devices
      - signal_edward

automation:
  - alias: Home Assistant - Reset Start counter
    id: '1672732259719'
    description: ''
    trigger:
    - platform: state
      entity_id:
      - sensor.home_assistant_last_shutdown
      not_from:
      - unavailable
      - unknown
    condition: []
    action:
    - service: counter.reset
      data: {}
      target:
        entity_id: counter.home_assistant_start_counter
    mode: single
  - alias: Home Assistant - Auto-update - Reload HACS
    id: '1673610635217'
    description: ''
    trigger:
    - platform: state
      entity_id:
      - schedule.home_assistant_update_schedule
      to: 'on'
    condition: []
    action:
    - service: homeassistant.reload_config_entry
      data:
        entry_id: 06a4100f9631a82c9da4ef0e5e8dad62
    mode: single
  - alias: Home Assistant - CPU temperature is too high
    id: '1640565042133'
    trigger:
    - platform: numeric_state
      entity_id: sensor.processor_temperature
      above: '70'
    action:
    - service: notify.signal_edward
      data:
        message: Shutting down Home Assistant host due to a high temperature alarm.
    - service: hassio.host_shutdown
      data: {}
    - delay:
        hours: 0
        minutes: 0
        seconds: 30
        milliseconds: 0
    - service: shell_command.host_shutdown
      data: {}
    mode: single
  - alias: Home Assistant - Auto-update
    id: '1662664714639'
    description: ''
    use_blueprint:
      path: EdwardTFN/auto_update_scheduled.yaml
      input:
        restart_bool: true
        schedule_entity: schedule.home_assistant_update_schedule
        actions_pre_update:
        - service: input_boolean.turn_on
          continue_on_error: true
          data: {}
          target:
            entity_id: input_boolean.data_centre_boot_requested
        - service: notify.signal_edward
          continue_on_error: true
          data:
            message: Starting Home Assistant update.
        - service: notify.signal_edward
          continue_on_error: true
          data:
            message: "List of updates: \n- {{ updates_list | join(' \n- ') }}"
        pause_entities:
        - input_boolean.home_party_mode
        - input_boolean.home_travelling_mode
        actions_pos_update:
        - service: notify.signal_edward
          continue_on_error: true
          data:
            message: Home Assistant update finished.
        - service: input_boolean.turn_off
          continue_on_error: true
          data: {}
          target:
            entity_id: input_boolean.data_centre_boot_requested
        backup_bool: false
        update_exclusions:
        - update.pi_hole_core_update_available
        - update.pi_hole_ftl_update_available
        - update.pi_hole_web_update_available
        core_os_update_mode: all
        actions_pre_restart:
        - service: notify.signal_edward
          continue_on_error: true
          data:
            message: Auto-update automation will restart Home Assistant now.
  - alias: Home Assistant - Notify when state changes
    id: '1664594522340'
    description: ''
    trigger:
    - platform: state
      entity_id:
      - input_boolean.home_party_mode
      - input_boolean.home_travelling_mode
      - input_boolean.home_empty
      - input_boolean.home_no_dogs
      for:
        hours: 0
        minutes: 0
        seconds: 5
      not_from:
      - unknown
      - unavailable
    condition: []
    action:
    - service: notify.signal_edward
      data:
        message: >
          {{ state_attr(trigger.entity_id, 'friendly_name') }} changed from {{ trigger.from_state.state | capitalize }} to {{ trigger.to_state.state | capitalize }}.
    mode: single
  - alias: Home Assistant - Start
    id: '1641740150433'
    description: ''
    trigger:
    - platform: homeassistant
      event: start
    condition: []
    action:
    - service: notify.signal_edward
      data:
        message: Home Assistant has started.
      continue_on_error: true
    - service: notify.signal_edward
      data:
        message: "{% set shutdown = states('sensor.home_assistant_last_shutdown') |
          default('') %} {% set startup = states('input_datetime.home_assistant_last_start')
          | default('') %} {% if startup > shutdown %}\n  It was an unrequested shutdown.
          This happened n times.\n\n  Last shutdown: {{ shutdown }}\n\n  Last start-up:
          {{ startup }}\n{% else %}\n  A shutdown was initiated at {{ shutdown }}.\n{%
          endif %}"
      continue_on_error: true
      enabled: false
    - if:
      - condition: template
        value_template: '{{ (states(''input_datetime.home_assistant_last_start'') |
          default('''')) > (states(''sensor.home_assistant_last_shutdown'') | default(''''))
          }}'
      then:
      - service: notify.signal_edward
        data:
          message: 'It was an unrequested shutdown. This happened {{ states(''counter.home_assistant_start_counter'')
            | default(''unknown'') }} time(s) since the last requested shutdown.

            Previous start-up: {{ states(''input_datetime.home_assistant_last_start'')
            | default('''') }}

            Last requested shutdown: {{ states(''sensor.home_assistant_last_shutdown'')
            | default('''') }}'
        continue_on_error: true
      - service: counter.increment
        data: {}
        target:
          entity_id: counter.home_assistant_start_counter
        continue_on_error: true
      else:
      - service: counter.reset
        data: {}
        target:
          entity_id: counter.home_assistant_start_counter
        continue_on_error: true
      - service: notify.signal_edward
        data:
          message: 'Outage: {{ (as_timestamp(now()) - as_timestamp(states(''sensor.home_assistant_last_shutdown'')
            | default(''''))) | float(0) | round(0) }}s.'
        continue_on_error: true
        enabled: true
    - service: input_datetime.set_datetime
      target:
        entity_id: input_datetime.home_assistant_last_start
      data:
        timestamp: '{{ now().timestamp() }}'
      continue_on_error: true
    - service: script.home_groups_update
      data: {}
      continue_on_error: true
    - delay:
        hours: 0
        minutes: 1
        seconds: 0
        milliseconds: 0
    - service: counter.increment
      data: {}
      target:
        entity_id: counter.home_assistant_start_counter
      continue_on_error: true
      enabled: false
    - if:
      - condition: numeric_state
        entity_id: counter.home_assistant_start_counter
        above: 1
      then:
      - service: notify.signal_edward
        data:
          message: Home Assistant has started after an unexpected shutdown. This happened
            {{ ((states('counter.home_assistant_start_counter') | int(1))-1) }} times.
            Please check what could have caused this restart.
        continue_on_error: true
      enabled: false
    - service: script.home_groups_update
      data: {}
      continue_on_error: true
    - delay:
        hours: 0
        minutes: 0
        seconds: 15
        milliseconds: 0
    - service: watchman.report
      data: {}
      continue_on_error: true
      enabled: true
    - delay:
        hours: 0
        minutes: 4
        seconds: 0
        milliseconds: 0
    - service: script.home_groups_update
      data: {}
      continue_on_error: true
    - delay:
        hours: 0
        minutes: 0
        seconds: 15
        milliseconds: 0
    - service: watchman.report
      data: {}
      continue_on_error: true
      enabled: true
    mode: single
  - alias: Home Assistant - Shutdown
    id: '1641740244441'
    description: ''
    trigger:
    - platform: homeassistant
      event: shutdown
    condition: []
    action:
    - parallel:
      - service: counter.reset
        data: {}
        target:
          entity_id: counter.home_assistant_start_counter
      - service: notify.signal_edward
        data:
          message: Home Assistant is shutting down.
    mode: single
    max: 10

binary_sensor:
  #- platform: ping # https://www.home-assistant.io/integrations/ping/#binary-sensor
    #host: !secret ip_pc_1
    #name: "Living room - PC-1"
    #count: 2
    #scan_interval: 30

  - platform: workday # https://www.home-assistant.io/integrations/workday/
    country: SE

  - name: Home Assistant - Temperature high
    platform: threshold
    entity_id: sensor.processor_temperature
    device_class: heat
    upper: 65
    hysteresis: 5


counter:
  home_assistant_start_counter:
    name: Home Assistant - Start counter
    icon: mdi:restart-alert
    restore: true
    step: 1
    minimum: 0
    initial: 0

device_tracker:
  #- platform: bluetooth_tracker
    #track_new_devices: true
  #- platform: bluetooth_le_tracker
    #track_new_devices: true
  - platform: ping # https://www.home-assistant.io/integrations/ping/#presence-detection
    hosts:
      #carols_phone_ping: !secret ip_carols_phone
      #edwards_phone_ping: !secret ip_edwards_phone
      pc_1_ping: !secret ip_pc_1

input_datetime:
  home_assistant_last_start:
    name: Home Assistant - Last start
    icon: mdi:restart
    has_date: true
    has_time: true

schedule:
  home_assistant_update_schedule:
    name: Home Assistant - Update schedule
    icon: mdi:update
    monday:
      - from: "03:00:00"
        to: "06:00:00"
      - from: "12:00:00"
        to: "13:30:00"
    tuesday:
      - from: "03:00:00"
        to: "06:00:00"
      - from: "12:00:00"
        to: "13:30:00"
    wednesday:
      - from: "03:00:00"
        to: "06:00:00"
      - from: "12:00:00"
        to: "13:30:00"
    thursday:
      - from: "03:00:00"
        to: "06:00:00"
      - from: "12:00:00"
        to: "13:30:00"
    friday:
      - from: "03:00:00"
        to: "06:00:00"
      - from: "12:00:00"
        to: "13:30:00"
    saturday:
      - from: "03:00:00"
        to: "06:00:00"
    sunday:
      - from: "03:00:00"
        to: "06:00:00"

script:
  home_groups_update:
    alias: Home - Groups - Update
    icon: mdi:group
    mode: single
    variables:
      core_power_entities: "{{ ['sensor.kitchen_cooker_hood_power'] + expand(integration_entities('shelly')) | selectattr('domain', 'eq', 'sensor') | selectattr('attributes.device_class', 'defined') | selectattr('attributes.device_class', 'eq', 'power') | map(attribute='entity_id') | list }}"
      core_switch_entities: "{{ ['switch.kitchen_cooker_hood'] + expand(integration_entities('shelly')) | selectattr('domain', 'eq', 'switch') | map(attribute='entity_id') | list }}"
      all_areas: >-
        {% set areas = namespace(area=[]) %}
        {% for state in expand(core_power_entities) %}
          {% set areas.area =  areas.area + [area_name(state.entity_id)] %}
        {% endfor %}
        {{ areas.area | unique | list }}
    sequence:
    - alias: 'Group: Core power switches'
      continue_on_error: true
      service: group.set
      data:
        object_id: home_core_power_switches
        name: Home - Core power switches
        icon: mdi:flash
        entities: "{{ core_switch_entities | join(',') }}"
    ## Deprecated - Now using sensor groups ##
    - alias: 'Group: Core power sensor'
      enabled: false
      continue_on_error: true
      service: group.set
      data:
        object_id: home_core_power_sensors
        name: Home - Core power sensors
        icon: mdi:flash
        entities: "{{ core_power_entities | join(',') }}"
    - alias: 'Group: Power sensors by areas'
      enabled: false
      continue_on_error: true
      repeat:
        count: '{{ all_areas | count }}'
        sequence:
          - service: logbook.log
            data:
              name: Create group
              entity_id: '{{ this.entity_id }}'
              message: "Creating group {{ all_areas[repeat.index - 1] | lower | replace(' ', '_') | replace('-', '') }}_power_sensors."
            continue_on_error: true
          - service: group.set
            data:
              object_id: "{{ all_areas[repeat.index - 1] | lower | replace(' ', '_') | replace('-', '') }}_power_sensors"
              name: "{{ all_areas[repeat.index - 1]  | capitalize }} - Power sensors"
              icon: mdi:flash
              entities: >-
                {{ expand(core_power_entities)
                  | selectattr('entity_id', 'in', area_entities(all_areas[repeat.index-1]))
                  | map(attribute='entity_id')
                  | list
                }}
            continue_on_error: true

sensor:
  - platform: systemmonitor # https://www.home-assistant.io/integrations/systemmonitor/
    #name: systemmonitor
    resources:
      - type: disk_use_percent
      - type: disk_use
      - type: disk_free
      - type: memory_use_percent
      - type: memory_use
      - type: memory_free
      - type: swap_use_percent
      - type: swap_use
      - type: swap_free
      - type: load_1m
      - type: load_5m
      - type: load_15m
      - type: network_in
        arg: eno1
      - type: network_out
        arg: eno1
      #- type: throughput_network_in
        #arg: eno1
      #- type: throughput_network_out
        #arg: eno1
      - type: packets_in
        arg: eno1
      - type: packets_out
        arg: eno1
      - type: ipv4_address
        arg: eno1
      - type: ipv6_address
        arg: eno1
      - type: processor_use
      #- type: processor_temperature
      - type: last_boot

  #- platform: command_line
    #name: Fan temperature
    #command: "cat /sys/class/thermal/thermal_zone0/temp"
    #unit_of_measurement: "°C"
    #value_template: '{{ value | multiply(0.001) | round(1) }}'

  #- platform: command_line
    #name: Motherboard temperature
    #command: "cat /sys/class/thermal/thermal_zone1/temp"
    #unit_of_measurement: "°C"
    #value_template: '{{ value | multiply(0.001) | round(1) }}'

  - platform: command_line
    name: Processor temperature
    command: "cat /sys/class/thermal/thermal_zone2/temp"
    unit_of_measurement: "°C"
    #device_class: temperature
    #state_class: measurement
    value_template: '{{ value | multiply(0.001) | round(1) }}'

  - platform: time_date
    display_options:
      - "time"
      - "date"
      - "date_time"
      - "date_time_utc"
      - "date_time_iso"
      - "time_date"
      - "time_utc"
      - "beat"

    #- platform: uptime # https://www.home-assistant.io/integrations/uptime/
  #### Monitoring the backup folder ####
  #- platform: folder #https://www.home-assistant.io/integrations/folder/
  #  folder:
  #    - backup

shell_command: # https://www.home-assistant.io/common-tasks/os/ and https://www.home-assistant.io/integrations/shell_command/
  host_reboot: ha host reboot
  host_shutdown: ha host shutdown

#switch:
  #- platform: command_line
    #switches:
      #home_assistant_system_shutdown:
        #command_off: "/usr/sbin/poweroff"

template:
  #- binary_sensor:
    #- name: Home Assistant temperature is high
      #unique_id: a3fd75fb-e537-48bf-a7ca-04b083fb9dba
      #state: "{{ states('sensor.processor_temperature') | float(default=0) > 65 }}"
      #device_class: problem

  - trigger:
    - platform: time_pattern # This will update every night
      hours: "0"
      minutes: "0"
    - platform: homeassistant
      event: start
    - platform: state
      entity_id:
        - input_button.home_assistant_update_entities_count
    sensor:
      - name: Home Assistant - Entities count
        unique_id: 85f96d7f-d492-4030-881e-4ce26ef1f707
        state: "{{ states | list | count | int(0) }}"
        attributes:
          last_update: "{{ now() }}"
          unavailable: "{{ states | selectattr('state', 'in', ['unavailable', 'unknown']) | list | count | int(0) }}"
          domain_list: "{{ states | map(attribute='domain') | unique | list | sort }}"
          count_list: >-
            {% set ns = namespace(count_list = []) %}
            {% for domain in (states | map(attribute='domain') | unique | list | sort) %}
              {% set ns.count_list = ns.count_list + [states | selectattr('domain', 'eq', domain) | list | count | int(0)] %}
            {% endfor %}
            {{ ns.count_list }}
          unavailable_count_list: >-
            {% set ns = namespace (unavailable_count_list = []) %}
            {% for domain in (states | map(attribute='domain') | unique | list | sort) %}
              {% set ns.unavailable_count_list = ns.unavailable_count_list + [states | selectattr('domain', 'eq', domain) | selectattr('state', 'in', ['unavailable', 'unknown']) | list | count | int(0)] %}
            {% endfor %}
            {{ ns.unavailable_count_list }}

  - trigger:
    - platform: homeassistant
      event: shutdown
    sensor:
      - name: Home Assistant - Last shutdown
        unique_id: 87eca4ee-cbf5-4558-a85e-0da0e8b8e787
        state: "{{ now() }}"

  - trigger:
    - platform: homeassistant
      event: start
    sensor:
      - name: Home Assistant - Last start
        unique_id: aae6f0fb-dc05-4f96-b51c-ee28af82c34a
        state: "{{ now() }}"
