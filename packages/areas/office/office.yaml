climate:
  - platform: climate_group # https://github.com/daenny/climate_group
    name: Office - Thermostat
    temperature_unit: C
    entities:
      - climate.office_thermostat_1
      - climate.office_thermostat_2

#generic_hygrostat: # https://www.home-assistant.io/integrations/generic_hygrostat/
#- name: Office - Hygrostat
##unique_id: 0e70550f-baac-4679-8179-1be50ebd94ba
#humidifier: switch.office_workstation_power_strip_switch_1
#target_sensor: sensor.office_hygrometer_humidity
#min_humidity: 0
#max_humidity: 100
#target_humidity: 30
#away_humidity: 25
#dry_tolerance: 2
#device_class: humidifier
#initial_state: true
#min_cycle_duration:
#minutes: 5

sensor:
  - platform: history_stats
    name: Office - Workstation - Motion ratio in the last 10m
    entity_id: binary_sensor.office_workstation_motion_occupancy
    state: "on"
    type: ratio
    start: "{{ (now() + timedelta(minutes=-10)) }}"
    end: "{{ now() }}"

  - name: Office - Total power
    platform: group
    unique_id: bc1b1004-a388-4465-9a1f-8d392901a99f
    unit_of_measurement: "W"
    device_class: power
    type: sum
    ignore_non_numeric: true
    entities:
      - sensor.office_door_outlets_power
      - sensor.office_windows_outlets_ceiling_lights_power
      - sensor.office_windows_outlets_outlets_power

template:
  - sensor:
      - name: Office - Thermostat Humidity
        unique_id: 5f8f23b4-d33d-4f43-8b0b-bf4bc1ba0f55
        unit_of_measurement: "%"
        device_class: humidity
        state: >-
          {% set cloud_humidity = states('sensor.office_thermostat_cloud_humidity') | default('unknown') %}
          {% if is_number(cloud_humidity) %}
            {{ cloud_humidity | float(0) | round(1) }}
          {% else %}
            {{ state_attr('climate.office_thermostat_1', 'current_humidity') }}
          {% endif %}

vacuum: # https://community.home-assistant.io/t/add-wifi-to-an-older-roomba/23282/221
  - platform: template
    vacuums:
      office_roomba:
        # Name for your Roomba
        friendly_name: "Office - Roomba"
        # Any unique identifier, eg, MAC address (optional)
        unique_id: 290197ee-f618-4dd3-8570-fa1504e11684
        # Vacuum state template
        # NOTE: need to convert to lower case for template to work and "Lost" is not a valid state.
        # Either change the custom component to use lower case and "idle" for state "lost" or 
        # change the template here to convert case and convert "lost" state to another valid state 
        # (see https://www.home-assistant.io/integrations/vacuum.template/#value_template for possible states)
        # and use one of the below value_templates. FYI, second one is NOT tested!
        value_template: >-
          {% set activity = states('sensor.office_roomba_activity') | lower %}
          {% if activity in ['cleaning','docked','unknown','unavailable'] %}
            {{ activity }}
          {% else %}
            error
          {% endif %}

        #"{{ states('sensor.office_roomba_activity')|lower }}"
        #value_template: >
        #  {% if is_state('sensor.roomba_activity', 'Cleaning') %}
        #    cleaning
        #  {% elif is_state('sensor.roomba_activity', 'Docked') %}
        #    docked
        #  {% elif is_state('sensor.roomba_activity', 'Lost') %}
        #    idle
        #  {% else %}
        #    error
        #  {% endif %}
        battery_level_template: "{{ states('sensor.office_roomba_battery') | float(0) | round(0) }}"
        # Use ESP module availability for vacuum availability, if defined in your ESPHome yaml
        # availability_template: "{{ states('binary_sensor.office_roomba_status') }}"
        # Provide vacuum attributes based on exposed ESPHome sensors
        attribute_templates:
          activity: "{{ states('sensor.office_roomba_activity') }}"
          #oi_mode: "{{ states('sensor.office_roomba_oi_mode')|title }}"
          charging_state: "{{ states('sensor.office_roomba_charging_state') }}"
          #temperature: "{{ states('sensor.office_roomba_temperature')|int }} Â°C"
          voltage: "{{ states('sensor.office_roomba_voltage') | float(0) }} V"
        # Provide commands for each action to send to ESP
        start:
          service: esphome.roomba_2_command
          data:
            command: start
        pause:
          service: esphome.roomba_2_command
          data:
            command: sleep
        stop:
          service: esphome.roomba_2_command
          data:
            command: stop
        return_to_base:
          service: esphome.roomba_2_command
          data:
            command: dock
        clean_spot:
          service: esphome.roomba_2_command
          data:
            command: spot
        locate:
          service: esphome.roomba_2_command
          data:
            command: locate