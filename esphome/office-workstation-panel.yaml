substitutions:
  ###### CHANGE ME START ######
  device_name: office-workstation-panel
  friendly_name: My office's testing panel
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  #bytes_per_char: "2"

  #nextion_update_url: "http://homeassistant.local:8123/local/nspanel/sonoff/nspanel.tft"
  #nextion_update_url: "http://homeassistant.local:8123/local/nspanel/dev/nspanel_us_land.tft"
  #nextion_update_url: "http://homeassistant.local:8123/local/nspanel/dev/nspanel_blank.tft"
  #nextion_update_url: "http://homeassistant.local:8123/local/nspanel/dev/nspanel_us.tft"
  #nextion_update_url: http://nspanel.costafirmo.com/tft/v4.1.4/nspanel_us_land.tft

  #upload_tft_baud_rate: "115200"

  ##### addon-configuration #####
  ## addon_climate ##
  heater_relay: "1" #Use relay 1
  cooler_relay: "2"
  #temp_units: "째F" #Temperatures in Fahrenheit
  #temp_min: "20" #Min supported temperature is 40째F
  #temp_max: "80" #Max supported temperature is 80째F
  #temp_step: "1" #Temperature granularity is 1째F
  #min_off_time: "1"
  #min_run_time: "1"
  #min_idle_time: "0"
  #target_low: "65"
  #target_high: "75"

##### My customization - Start #####
##### My customization - End #####

packages:
  nspanel_package:    !include packages/Blackymas/nspanel_esphome.yaml
  #dual_package:       !include packages/Blackymas/nspanel_esphome_addon_climate_dual.yaml
  heat_package:       !include packages/Blackymas/nspanel_esphome_addon_climate_heat.yaml
  #cool_package:       !include packages/Blackymas/nspanel_esphome_addon_climate_cool.yaml
  #advanced_package:   !include packages/Blackymas/esphome/nspanel_esphome_advanced.yaml
  #ble_proxy_package:  !include packages/Blackymas/esphome/nspanel_esphome_addon_bluetooth_proxy.yaml
  #nspanel_core:       !include packages/Blackymas/esphome/nspanel_esphome_core.yaml
  #nspanel_upload_tft: !include packages/Blackymas/advanced/esphome/nspanel_esphome_addon_upload_tft.yaml
  #debug: !include packages/config_debug_esp32.yaml
  #remote_package:
  #  url: https://github.com/Blackymas/NSPanel_HA_Blueprint
  #  ref: main
  #  refresh: 1s
  #  files:
  #    - nspanel_esphome.yaml # Base package
  #    - nspanel_esphome_addon_climate_heat.yaml
  #    - esphome/nspanel_esphome_advanced.yaml
  #    #- nspanel_esphome_core.yaml # Base package
  #    #- nspanel_esphome_upload_tft.yaml # Use only if you have issues with TFT transfer

external_components:
  - source:
      type: local
      path: packages/Blackymas/components
    refresh: 1s
    components:
      - nspanel_ha_blueprint
#  - source:
#      type: local
#      path: packages/sandbox/components
#    refresh: 1s
#    components:
#      - nextion
#  - source:
#      type: git
#      url: https://github.com/edwardtfn/esphome
#      ref: nextion-26
#    refresh: 1s
#    components:
#      - nextion
#  - source:
#      type: git
#      url: https://github.com/edwardtfn/esphome
#      ref: psram-01
#    refresh: 1s
#    components:
#      - psram

#logger:
#  level: VERBOSE

#esp32:
#  framework:
#    type: arduino
#    sdkconfig_options: !remove
#    type: esp-idf
#    version: 5.0.2
#    platform_version: 6.3.2
#      CONFIG_MBEDTLS_SSL_VARIABLE_BUFFER_LENGTH: "y"  # This causes issues with TFT Update
      #BOARD_HAS_PSRAM: "y"
      #CONFIG_D0WD_PSRAM_MISO_PIN: "19"
      #CONFIG_D0WD_PSRAM_MOSI_PIN: "23"
      #CONFIG_SPIRAM_CACHE_WORKAROUND: "y"
      #CONFIG_SPIRAM_SUPPORT: "y"

#psram:
#  id: ext_ram
  #mode: octal
  #speed: 120MHz

#button:
#  - id: release_ble
#    name: DEBUG Release Bluetooth
#    platform: template
#    on_press:
#      then:
#        lambda: bluetooth_release_memory();
#          #include "esp_bt.h"
#          esp_bluedroid_disable();
#          esp_bluedroid_deinit();
#          esp_bt_controller_disable();
#          esp_bt_controller_deinit();
#          esp_bt_mem_release(ESP_BT_MODE_BTDM);

#  platformio_options:
#    build_flags:
#      - -Wno-expansion-to-defined
#      - -w
#      - -mfix-esp32-psram-cache-issue
#      - -DBOARD_HAS_PSRAM
#      - -DCONFIG_ESP32_SPIRAM_SUPPORT=1
#      # If you had to define custom PSRAM pins, which is unusual, flags might look something like this:
#      - -DCUSTOM_PSRAM_CS_PIN=18
#      - -DCUSTOM_PSRAM_CLK_PIN=5
#      - -DCUSTOM_PSRAM_MOSI_PIN=23
#      - -DCUSTOM_PSRAM_MISO_PIN=19

#esphome:
#  platformio_options:
#    build_flags:
#      - -DCONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST="y"
#      - -DCONFIG_BT_BLE_DYNAMIC_ENV_MEMORY="y"
#      - -DCONFIG_ESP32_REV_MIN_3="y"
#      - -DCONFIG_LWIP_MAX_SOCKETS=5  # This breakes web_server
#      - -DCONFIG_MBEDTLS_DYNAMIC_BUFFER="y"
#      - -DCONFIG_MBEDTLS_DYNAMIC_FREE_CA_CERT="y"
#      - -DCONFIG_MBEDTLS_DYNAMIC_FREE_CONFIG_DATA="y"
#      - -DCONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC="y"
#      - -DCONFIG_SPIRAM_ALLOW_BSS_SEG_EXTERNAL_MEMORY="y"
#      - -DCONFIG_SPIRAM_IGNORE_NOTFOUND="y"
#      - -DCONFIG_SPIRAM_RODATA="y"
#      - -DCONFIG_SPIRAM_TRY_ALLOCATE_WIFI_LWIP="y"
#      - -ffunction-sections
#      - -fdata-sections
#      - -Wl,--gc-sections
#      - -DDCONFIG_D0WD_PSRAM_CLK_IO=5
#      - -DDCONFIG_D0WD_PSRAM_CS_IO=18


#GPIO05 - PSRAM SCLK
#GPIO18 - PSRAM /CE
#GPIO09 - PSRAM SIO[3]

#switch:
#  - id: nspanel_psram_sw
#    name: "PSRAM"
#    platform: gpio
#    pin:
#      number: 18
#      inverted: true
#    restore_mode: ALWAYS_ON

ota:
  password: !remove

#interval:
#  - interval: 1h
#    then:
#      - lambda: |-
#          #define STRINGIFY(x) #x
#          #define TOSTRING(x) STRINGIFY(x)
#          ESP_LOGI("DEBUG", "ESPHOME_VERSION_CODE: %s", TOSTRING(ESPHOME_VERSION_CODE));
#          ESP_LOGI("DEBUG", "Running ESPHome version: %s", ESPHOME_VERSION);
#
#          ESP_LOGI("DEBUG", "Free heap: %" PRIu32, esp_get_free_heap_size());
#          ESP_LOGI("DEBUG", "current_page:     %s", current_page->state.c_str());
#          #ifdef USE_ESP32_BLE_CLIENT
#          ESP_LOGI("DEBUG", "USE_ESP32_BLE_CLIENT");
#          //ESP_LOGI("DEBUG", "ble_tracker enabled? %s", YESNO(ble_tracker->parent_->enable));
#          #endif
#          ESP_LOGI("DEBUG", "blueprint_status: %0.1f", blueprint_status->state);
#          ESP_LOGI("DEBUG", "version_tft: %s", version_tft->state.c_str());
#          ESP_LOGI("DEBUG", "Empty:       %s", YESNO(version_tft->state.empty()));
#          ESP_LOGI("DEBUG", "!Screensaver: %s", YESNO(current_page->state != "screensaver"));
#          ESP_LOGI("DEBUG", "Memory info starts");
#          heap_caps_print_heap_info(MALLOC_CAP_INTERNAL);
#          ESP_LOGI("DEBUG", "Memory info finished");
#          auto time = id(time_provider).now();
#          ESP_LOGI("Manual Check", "Current time: %s (Timezone: %s, time offset: %" PRIu32 ")", time.strftime("%Y-%m-%d %H:%M:%S").c_str(), time_provider->get_timezone().c_str(), time.timezone_offset());
#          ESP_LOGD("DEBUG", "Is Setup: %s", YESNO(disp1->is_setup()));
#          ESP_LOGD("DEBUG", "Page Id: %f", page_id->state);
#          ESP_LOGD("DEBUG", "Is Detected: %s", disp1->is_detected() ? "True" : "False");
#          ESP_LOGD("DEBUG", "Host name: %s", network::get_use_address().c_str());
#          ESP_LOGD("DEBUG", "is_restored_settings: %s", id(is_restored_settings) ? "True" : "False");
#          ESP_LOGD("DEBUG", "is_addon_climate_visible: %s", id(is_addon_climate_visible) ? "True" : "False");
#          ESP_LOGD("DEBUG", "is_blueprint_updated: %s", id(is_blueprint_updated) ? "True" : "False");
#          ESP_LOGD("DEBUG", "is_global_settings_loaded: %s", id(is_global_settings_loaded) ? "True" : "False");
#          ESP_LOGD("DEBUG", "is_embedded_thermostat: %s", id(is_embedded_thermostat) ? "True" : "False");
#          ESP_LOGD("DEBUG", "setup_sequence_completed: %s", id(setup_sequence_completed) ? "True" : "False");
#          ESP_LOGD("DEBUG", "wakeup_page_id: %i", id(wakeup_page_id));
#          ESP_LOGD("DEBUG", "tft_branch: %i", id(tft_branch));
#          ESP_LOGD("DEBUG", "tft_model: %i", id(tft_model));

#captive_portal: !remove

#web_server: !remove

#psram:
#  id: nspanel_psram

#  - source:
#      type: git
#      url: https://github.com/edwardtfn/esphome
#      ref: nextion-23
#    components:
#      - nextion
#    refresh: 1s

#display:
#  - id: !extend disp1
#    touch_sleep_timeout: 30
#    exit_reparse_on_start: true
#    #soft_reset_on_start: false

#uart:
#  - id: !extend tf_uart
#    debug:
#      direction: BOTH
#      dummy_receiver: false
#      after:
#        delimiter: 0xff, 0xff, 0xff
#      sequence:
#        - lambda: UARTDebug::log_string(direction, bytes);

#debug:

#text_sensor:
#  - platform: debug
#    device:
#      name: "Device Info"
#    reset_reason:
#      name: "Reset Reason"

#sensor:
#  - platform: debug
#    free:
#      name: "Heap Free"
#    block:
#      name: "Heap Max Block"
#    loop_time:
#      name: "Loop Time"
#    psram:
#      name: "PSRAM Free"


#api:
#  services:
#    - service: set_entity
#      variables:
#        entity_id: string
#      then:
#        - lambda: |-
#            ESP_LOGI("DEBUG", "Changing entity_id to %s...", entity_id.c_str());
#            ha_subscription_01->dump_config();
#            id(ha_subscription_01).set_entity_id(entity_id.c_str());
#            ha_subscription_01->setup();
#            ha_subscription_01->dump_config();

#sensor:
#  - id: ha_subscription_01
#    platform: homeassistant
#    entity_id: sensor.total_power

#bluetooth_proxy:
#  active: true

#sensor:
#  - id: ble_connections_limit
#    name: BLE Connections Limit
#    platform: template
#    internal: false
#    lambda: return ble_proxy->get_bluetooth_connections_limit();
#    accuracy_decimals: 0

#  - id: ble_connections_free
#    name: BLE Connections Free
#    platform: template
#    internal: false
#    lambda: return ble_proxy->get_bluetooth_connections_free();
#    accuracy_decimals: 0

##Add the display as a light in Home Assistant start
light:
  # Add the display as a light in Home Assistant
  - name: Display
    id: display_light
    icon: mdi:tablet-dashboard
    platform: monochromatic
    output: display_output
    default_transition_length: 0s
    on_turn_on:
      then:
        - lambda: |-
            ESP_LOGD("light.display_light", "Turn-on");
            if (current_page->state == "screensaver") disp1->goto_page(wakeup_page_name->state.c_str());
            timer_reset_all->execute();
    on_turn_off:
      then:
        - lambda: |-
            ESP_LOGD("light.display_light", "Turn-off");
            goto_page->execute("screensaver");

output:
  # Output required by `display_light` to send the commands to Nextion
  - id: display_output
    platform: template
    type: float
    write_action:
      - lambda: |-
          ESP_LOGV("output.display_output", "state:              %f", state);
          const uint8_t current_brightness = int(round(display_light->current_values.is_on() ? (display_light->current_values.get_brightness() * 100.0f) : 0.0));
          ESP_LOGV("output.display_output", "current_brightness: %i%%", current_brightness);
          set_brightness->execute(current_brightness);

script:
  # Updates the existing `page_changed` script to update the `display_light` status when a page changes
  - id: !extend page_changed
    then:
      - lambda: |-
          ESP_LOGV("script.page_changed(custom)", "page:    %s", current_page->state.c_str());
          ESP_LOGV("script.page_changed(custom)", "is_on(): %s", YESNO(display_light->current_values.is_on()));
          if (current_page->state == "screensaver" and display_light->current_values.is_on()) {
            ESP_LOGV("script.page_changed(custom)", "Turning off light.");
            auto call = display_light->turn_off();
            call.perform();
          } else if (current_page->state != "screensaver" and (not display_light->current_values.is_on())) {
            ESP_LOGV("script.page_changed(custom)", "Turning on light.");
            auto call = display_light->turn_on();
            call.perform();
          }

  # Updates the existing `set_brightness` script to update the `display_light` status when a new brightness level is set
  - id: !extend set_brightness
    then:
      - lambda: |-
          ESP_LOGV("script.set_brightness(custom)", "brightness:               %.0f%%", brightness);
          uint8_t current_light_brightness = int(round(display_light->current_values.is_on() ? (display_light->current_values.get_brightness() * 100.0f) : 0.0));
          ESP_LOGV("script.set_brightness(custom)", "current_light_brightness: %i%%", current_light_brightness);
          if (brightness != current_light_brightness) {
            if (current_page->state != "screensaver" and brightness > 0) {
              ESP_LOGV("script.set_brightness(custom)", "Adjusting light brightness to %.3f%%", brightness / 100.0f);
              auto call = display_light->turn_on();
              call.set_brightness(brightness / 100.0f);
              call.perform();
            } else if (display_light->current_values.is_on()) {
              ESP_LOGV("script.set_brightness(custom)", "Turning off light.");
              auto call = display_light->turn_off();
              call.set_brightness(0);
              call.perform();
            }
          }
##Add the display as a light in Home Assistant end

##### My customization - End #####
