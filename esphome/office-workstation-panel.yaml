substitutions:
  ###### CHANGE ME START ######
  device_name: office-workstation-panel
  friendly_name: My office's testing panel
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password

  #nextion_update_url: "http://homeassistant.local:8123/local/nspanel/sonoff/nspanel.tft"
  #nextion_update_url: "http://homeassistant.local:8123/local/nspanel/dev/nspanel_us_land.tft"
  #nextion_update_url: "http://homeassistant.local:8123/local/nspanel/dev/nspanel_blank.tft"
  #nextion_update_url: "http://homeassistant.local:8123/local/nspanel/dev/nspanel_us.tft"
  #nextion_update_url: http://nspanel.costafirmo.com/tft/v4.1.4/nspanel_us_land.tft

  #upload_tft_baud_rate: "115200"

  ##### addon-configuration #####
  ## addon_climate ##
  heater_relay: "1" #Use relay 1
  cooler_relay: "2"
  #temp_units: "째F" #Temperatures in Fahrenheit
  #temp_min: "20" #Min supported temperature is 40째F
  #temp_max: "80" #Max supported temperature is 80째F
  #temp_step: "1" #Temperature granularity is 1째F
  #min_off_time: "1"
  #min_run_time: "1"
  #min_idle_time: "0"
  #target_low: "65"
  #target_high: "75"

##### My customization - Start #####
##### My customization - End #####

packages:
  nspanel_package: !include packages/Blackymas/nspanel_esphome.yaml
  #dual_package: !include packages/Blackymas/nspanel_esphome_addon_climate_dual.yaml
  #heat_package: !include packages/Blackymas/nspanel_esphome_addon_climate_heat.yaml
  #cool_package: !include packages/Blackymas/nspanel_esphome_addon_climate_cool.yaml
  #advanced_package: !include packages/Blackymas/advanced/esphome/nspanel_esphome_advanced.yaml
  #nspanel_core: !include packages/Blackymas/advanced/esphome/nspanel_esphome_core.yaml
  #nspanel_upload_tft: !include packages/Blackymas/advanced/esphome/nspanel_esphome_addon_upload_tft.yaml
  #debug: !include packages/config_debug_esp32.yaml
  #remote_package:
  #  url: https://github.com/Blackymas/NSPanel_HA_Blueprint
  #  ref: main
  #  refresh: 1s
  #  files:
  #    - nspanel_esphome.yaml # Base package
  #    - nspanel_esphome_addon_climate_heat.yaml
  #    #- advanced/esphome/nspanel_esphome_advanced.yaml
  #    #- nspanel_esphome_core.yaml # Base package
  #    #- nspanel_esphome_upload_tft.yaml # Use only if you have issues with TFT transfer

external_components:
  - source:
      type: local
      path: packages/Blackymas/components
    components:
      - nspanel_ha_blueprint
    refresh: 3s

#logger:
#  level: VERBOSE

#bluetooth_proxy:
#  id: bt_proxy


esp32:
#  board: esp-wrover-kit
  framework:
#    type: arduino
    type: esp-idf
#    version: 5.0.2
#    platform_version: 6.3.2

#esphome:
#  platformio_options:
#    build_flags:
#      - -DBOARD_HAS_PSRAM
#      - -DCONFIG_ESP32_SPIRAM_SUPPORT=1
#      # If you had to define custom PSRAM pins, which is unusual, flags might look something like this:
#      - -DCUSTOM_PSRAM_CS_PIN=18
#      - -DCUSTOM_PSRAM_CLK_PIN=5
#      - -DCUSTOM_PSRAM_MOSI_PIN=23
#      - -DCUSTOM_PSRAM_MISO_PIN=19
  
#psram:
#  id: ext_ram

#esphome:
#  platformio_options:
#    build_flags:
#      - -DDCONFIG_D0WD_PSRAM_CLK_IO=5
#      - -DDCONFIG_D0WD_PSRAM_CS_IO=9


#GPIO05 - PSRAM SCLK
#GPIO18 - PSRAM /CE
#GPIO09 - PSRAM SIO[3]

#switch:
#  - id: nspanel_psram_sw
#    name: "PSRAM"
#    platform: gpio
#    pin:
#      number: 18
#      inverted: true
#    restore_mode: ALWAYS_ON

ota:
  password: !remove

#interval:
#  - interval: 10s
#    then:
#      - lambda: |-
#          ESP_LOGI("DEBUG", "current_page:     %s", current_page->state.c_str());
#          #ifdef USE_ESP32_BLE_CLIENT
#          ESP_LOGI("DEBUG", "USE_ESP32_BLE_CLIENT");
#          //ESP_LOGI("DEBUG", "ble_tracker enabled? %s", YESNO(ble_tracker->parent_->enable));
#          #endif
#          ESP_LOGI("DEBUG", "blueprint_status: %0.1f", blueprint_status->state);
#          ESP_LOGI("DEBUG", "version_tft: %s", version_tft->state.c_str());
#          ESP_LOGI("DEBUG", "Empty:       %s", YESNO(version_tft->state.empty()));
#          ESP_LOGI("DEBUG", "!Screensaver: %s", YESNO(current_page->state != "screensaver"));
#          ESP_LOGI("DEBUG", "Memory info starts");
#          heap_caps_print_heap_info(MALLOC_CAP_INTERNAL);
#          ESP_LOGI("DEBUG", "Memory info finished");
#          auto time = id(time_provider).now();
#          ESP_LOGI("Manual Check", "Current time: %s (Timezone: %s, time offset: %" PRIu32 ")", time.strftime("%Y-%m-%d %H:%M:%S").c_str(), time_provider->get_timezone().c_str(), time.timezone_offset());
#          ESP_LOGD("DEBUG", "Is Setup: %s", YESNO(disp1->is_setup()));
#          ESP_LOGD("DEBUG", "Page Id: %f", page_id->state);
#          ESP_LOGD("DEBUG", "Is Detected: %s", disp1->is_detected() ? "True" : "False");
#          ESP_LOGD("DEBUG", "Host name: %s", network::get_use_address().c_str());
#          ESP_LOGD("DEBUG", "is_restored_settings: %s", id(is_restored_settings) ? "True" : "False");
#          ESP_LOGD("DEBUG", "is_addon_climate_visible: %s", id(is_addon_climate_visible) ? "True" : "False");
#          ESP_LOGD("DEBUG", "is_blueprint_updated: %s", id(is_blueprint_updated) ? "True" : "False");
#          ESP_LOGD("DEBUG", "is_global_settings_loaded: %s", id(is_global_settings_loaded) ? "True" : "False");
#          ESP_LOGD("DEBUG", "is_embedded_thermostat: %s", id(is_embedded_thermostat) ? "True" : "False");
#          ESP_LOGD("DEBUG", "setup_sequence_completed: %s", id(setup_sequence_completed) ? "True" : "False");
#          ESP_LOGD("DEBUG", "wakeup_page_id: %i", id(wakeup_page_id));
#          ESP_LOGD("DEBUG", "tft_branch: %i", id(tft_branch));
#          ESP_LOGD("DEBUG", "tft_model: %i", id(tft_model));

#captive_portal: !remove

#web_server: !remove

#psram:
#  id: nspanel_psram

#  - source:
#      type: git
#      url: https://github.com/edwardtfn/esphome
#      ref: nextion-23
#    components:
#      - nextion
#    refresh: 1s

#display:
#  - id: !extend disp1
#    exit_reparse_on_start: true
#    #soft_reset_on_start: false

uart:
  - id: !extend tf_uart
    debug:
      direction: BOTH
      dummy_receiver: false
      after:
        delimiter: 0xff, 0xff, 0xff
      sequence:
        - lambda: UARTDebug::log_string(direction, bytes);

debug:

text_sensor:
  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"

sensor:
  - platform: debug
    free:
      name: "Heap Free"
    block:
      name: "Heap Max Block"
    loop_time:
      name: "Loop Time"
